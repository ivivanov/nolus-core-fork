name: Nolus-Core

on:
  workflow_dispatch:
  push:
    branches:
      - "**" # Match any branch
    tags:
      - "**" # Match any tag

env:
  VERSION_TAG: ${{ github.ref_name }}
  ARTIFACT_BIN: "nolus.tar.gz"
  # make sure to update build-binary container tag as well
  CONTAINER_REGISTRY: ghcr.io
  BUILDER_IMAGE_TAG: "1.22.3"
  BUILDER_IMAGE_NAME: "builder"
  DOCKERFILE: ".github/images/builder.Dockerfile"
  CHECKSUM_FILE: "sha256sum.txt"
  METADATA_FILE: "${{ github.ref_name }}_binaries.json"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  # Checks if builder docker image exists
  builder-exists:
    name: Builder exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - id: "check"
        name: Check if image exists
        run: |-
          if docker manifest inspect ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.BUILDER_IMAGE_NAME }}:${{ env.BUILDER_IMAGE_TAG }} > /dev/null 2>&1; then
            exists=true
          else
            exists=false
          fi
          echo "exists=$exists" >> "$GITHUB_OUTPUT"

      - name: Check if image exists
        run: |-
          echo ${{ steps.check.outputs.exists }}

  # Build and push builder docker image
  builder-create:
    name: Create builder image
    needs: builder-exists
    runs-on: ubuntu-latest
    if: needs.builder-exists.outputs.exists == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.BUILDER_IMAGE_NAME }}:${{ env.BUILDER_IMAGE_TAG }}

  lint-go:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.22
          cache: false

      - uses: actions/checkout@v4

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2
          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  test-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: lint-go
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.22
          cache: false

      - uses: actions/checkout@v4

      - run: |
          make test-unit

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results-out
          path: |
            cover.out
          retention-days: 1

  test-unit-coverage:
    name: Code coverage reports
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.22
          cache: false

      - uses: actions/checkout@v4

      - name: Download coverage result
        uses: actions/download-artifact@v4
        with:
          name: coverage-results-out

      - run: |
          make test-unit-coverage
          make test-unit-coverage-report

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage.html

  build-binary:
    name: Build binary
    runs-on: ubuntu-latest
    container:
      # image name needs to be hardcoded: https://github.com/orgs/community/discussions/26324
      # TODO: change repo!
      image: "ghcr.io/ivivanov/nolus-core-fork/builder:1.22.3"
    needs: [builder-create, test-unit-coverage]
    if: >
      always() &&
      (needs.test-unit-coverage.result == 'success') &&
      (needs.builder-create.result == 'skipped' || needs.builder-create.result == 'success')

    steps:
      - uses: actions/checkout@v4

      # This is to fix GIT not liking owner of the checkout dir
      # Happens when executing not into the default container
      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Run build binary
        run: |
          make build
          echo "Ensuring binary is statically linked ..."
          file target/release/nolusd | grep "statically linked"

      - name: Prepare binary tar
        run: |
          tar -C target/release/ -czvf $ARTIFACT_BIN .

      - name: Upload binary tar
        uses: actions/upload-artifact@v4
        with:
          name: nolusd-tar-${{ env.VERSION_TAG }}
          path: ${{ env.ARTIFACT_BIN }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: nolusd-${{ env.VERSION_TAG }}
          path: target/release/nolusd

  # Add metadata for cosmovisor
  add-meta:
    name: Add metadata
    needs: build-binary
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Get binary checksum
        run: |
          CHECKSUM=$(shasum -a 256 nolusd-"${VERSION_TAG}"/nolusd)
          echo "$CHECKSUM" > $CHECKSUM_FILE
          HASH=$(echo "$CHECKSUM" | cut -d' ' -f1)
          JSON="{\"binaries\": {\"linux/amd64\": \"https://github.com/nolus-protocol/nolus-core/releases/download/${VERSION_TAG}/nolusd?checksum=sha256:$HASH\"}}"
          echo $JSON > $METADATA_FILE

      - name: Upload metadata
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: |
            ${{ env.METADATA_FILE }}
            ${{ env.CHECKSUM_FILE }}

  # Drafts a Github release
  # Only tags which match the protected tag pattern will trigger this job
  # Tag pattern: v*.*.*
  release:
    name: Draft release
    runs-on: ubuntu-latest
    needs: add-meta
    permissions: write-all

    steps:
      - name: Check if protected tag is denoted
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag matches pattern."
            echo "tag_matches=true" >> $GITHUB_ENV
          else
            echo "Tag does not match pattern."
            echo "tag_matches=false" >> $GITHUB_ENV
          fi

      # The job will continue only if the tag matches the pattern
      - name: Download artifacts
        if: env.tag_matches == 'true'
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        if: env.tag_matches == 'true'
        run: ls -R

      # temporary using commit as version until it is merged. Updates node version v12 -> v16
      - uses: "marvinpinto/action-automatic-releases@6273874b61ebc8c71f1a61b2d98e234cf389b303"
        if: env.tag_matches == 'true'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          draft: true
          files: |
            nolusd-tar-${{ env.VERSION_TAG }}
            nolusd-${{ env.VERSION_TAG }}
            metadata
