name: Nolus-Core

on:
  workflow_dispatch:
  push:

env:
  VERSION_TAG: ${{ github.ref_name }}
  ARTIFACT_BIN: "nolus.tar.gz"
  # make sure to update build-binary container tag as well
  CONTAINER_REGISTRY: ghcr.io
  BUILDER_IMAGE_TAG: "1.22.3"
  BUILDER_IMAGE_NAME: "builder"
  DOCKERFILE: ".github/images/builder.Dockerfile"
  CHECKSUM_FILE: "sha256sum.txt"
  METADATA_FILE: "${{ github.ref_name }}_binaries.json"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  builder-exists:
    name: Builder exists
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - id: "check"
        name: Check if image exists
        run: |-
          if docker manifest inspect ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.BUILDER_IMAGE_NAME }}:${{ env.BUILDER_IMAGE_TAG }} > /dev/null 2>&1; then
            exists=true
          else
            exists=false
          fi
          echo "exists=$exists" >> "$GITHUB_OUTPUT"

      - name: Check if image exists
        run: |-
          echo ${{ steps.check.outputs.exists }}

  builder-create:
    name: Create builder image
    needs: builder-exists
    runs-on: ubuntu-latest
    if: needs.builder-exists.outputs.exists == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.BUILDER_IMAGE_NAME }}:${{ env.BUILDER_IMAGE_TAG }}

  lint-go:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.22
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2
          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  test-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: lint-go
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.22
      
      - uses: actions/checkout@v3
      
      - run: |
          make test-unit
      
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results-out
          path: |
            cover.out
          retention-days: 1

  test-unit-coverage:
    name: Code coverage reports
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - uses: actions/checkout@v3

      - name: Download coverage result
        uses: actions/download-artifact@v3
        with:
          name: coverage-results-out
      
      - run: |
          make test-unit-coverage
          make test-unit-coverage-report

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage.html
